{"version":3,"file":"static/webpack/static\\development\\pages\\signIn.js.c73e4ef8f00a4dba9c88.hot-update.js","sources":["webpack:///./components/SignInForm.Component.jsx"],"sourcesContent":["import React,{useCallback,useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'; \r\nimport {Form,Input,Checkbox, Icon, Button} from 'antd';\r\nimport {SIGN_IN_REQUEST} from '../reducers/user'; \r\nexport const useInput = (initValue=null) => {\r\n    const [value,setter] = useState(initValue);\r\n    const handler = useCallback( (e) => {\r\n        setter(e.target.value);\r\n    }, []);\r\n    return [value, handler]; \r\n}\r\n\r\nconst SignInForm = (props) => {\r\n    const [id,onChangeId] =useInput('');\r\n    const [password, onChangePassword] = useInput('');\r\n    const [passwordError, setpasswordError] = useInput('');\r\n    const [confirmDirty, setConfirmDirty] = useInput('');\r\n    \r\n    const {isSigningUp} = useSelector(selector => selector.user); \r\n    const {getFieldDecorator} = props.form; \r\n    \r\n    const dispatch = useDispatch(); \r\n    useEffect( (e) => {\r\n    },[]);\r\n\r\n    const onSubmit = useCallback((e) => {\r\n             e.preventDefault(); \r\n             if(!(id && password)) {\r\n                 return false; \r\n             }\r\n             console.log({\r\n                 id,\r\n                 password,\r\n                 checkTerm\r\n             })\r\n             dispatch({\r\n                type:SIGN_UP_REQUEST   \r\n             })\r\n    },[id,password]);\r\n    \r\n    const passwordValidate = (rule, value, callback) => {\r\n        const {form} = props;\r\n        if(value && form && !form.getFieldValue('password').length < 4){\r\n            callback('비밀번호를 올바르게 입력해주세요.');\r\n        } else {\r\n            callback(); \r\n        }\r\n    }\r\n\r\n  \r\n\r\n    const validateToNextPassword = (rule, value, callback) => {\r\n        const {form} = props;\r\n        if(value && form && confirmDirty) {\r\n            form.validateFields(['confirm'], {force: true})\r\n        }\r\n        callback();\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <Form.Item label=\"이메일\">\r\n                    {\r\n                        getFieldDecorator('email', {\r\n                            rules: [\r\n                                {\r\n                                    type: 'email',\r\n                                    message: '올바른 이메일 형식이 아닙니다.'\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: '이메일을 입력해주세요.'\r\n                                },\r\n                            ]\r\n                        })(<Input\r\n                            placeholder=\"E-mail\"\r\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            onChange={onChangeId}\r\n                            />)\r\n                    }\r\n                </Form.Item >\r\n                <Form.Item label=\"비밀번호\" hasFeedback>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '비밀번호를 입력하세요'\r\n                            },\r\n                            {\r\n                                validator: passwordValidate \r\n                            }\r\n                        ]\r\n                    })(<Input.Password \r\n                        placeholder=\"Password\"\r\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                        onChange = {onChangePassword}\r\n                        />)}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button \r\n                        type=\"primary\" \r\n                        htmlType=\"submit\" \r\n                        style={{float: 'right'}}\r\n                        loading={isSigningUp}\r\n                    >로그인</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form.create({name:'signIn'})(SignInForm);"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AANA;AACA;AADA;AASA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AANA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AADA;AANA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAAA;AAAA;;;;A","sourceRoot":""}