{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaewon\\\\Desktop\\\\web\\\\udemy-sass\\\\front\\\\components\\\\SignUpForm.Component.jsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Input, Checkbox, Icon, Button } from 'antd';\nexport const useInput = (initValue = null) => {\n  const {\n    0: value,\n    1: setter\n  } = useState(initValue);\n  const handler = useCallback(e => {\n    setter(e.target.value);\n  }, []);\n  return [value, handler];\n};\n\nconst SignUp = props => {\n  const [id, onChangeId] = useInput('');\n  const [password, onChangePassword] = useInput('');\n  const [passwordCheck, onChangePasswordCheck] = useInput('');\n  const [checkTerm, onChangeCheckTerm] = useInput('');\n  const [passwordError, setpasswordError] = useInput('');\n  const [confirmDirty, setConfirmDirty] = useInput('');\n  const {\n    isLoading\n  } = useSelector(selector => selector.user);\n  const {\n    getFieldDecorator\n  } = props.form;\n  const dispatch = useDispatch();\n  useEffect(e => {\n    console.log(isLoading);\n  }, []);\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n    console.log({\n      id,\n      password,\n      passwordCheck,\n      checkTerm\n    });\n    dispatch({\n      type: SIGN_UP_REQUEST\n    });\n  }, [id, password, passwordCheck, checkTerm]);\n\n  const compareToFirstPassword = (rule, value, callback) => {\n    const {\n      form\n    } = props;\n\n    if (value && form && value !== form.getFieldValue('password')) {\n      callback('비밀번호가 일치하지 않습니다!');\n    } else {\n      callback();\n    }\n  };\n\n  const validateToNextPassword = (rule, value, callback) => {\n    const {\n      form\n    } = props;\n\n    if (value && form && confirmDirty) {\n      form.validateFields(['confirm'], {\n        force: true\n      });\n    }\n\n    callback();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    label: \"\\uC774\\uBA54\\uC77C\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: '올바른 이메일 형식이 아닙니다.'\n    }, {\n      required: true,\n      message: '이메일을 입력해주세요.'\n    }]\n  })(__jsx(Input, {\n    placeholder: \"E-mail\",\n    prefix: __jsx(Icon, {\n      type: \"user\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }),\n    onChange: onChangeId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: '비밀번호를 입력하세요'\n    }, {\n      validator: validateToNextPassword\n    }]\n  })(__jsx(Input.Password, {\n    placeholder: \"Password\",\n    prefix: __jsx(Icon, {\n      type: \"lock\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }),\n    onChange: onChangePassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, getFieldDecorator('confirm', {\n    rules: [{\n      required: true,\n      message: '비밀번호를 다시 입력하세요'\n    }, {\n      validator: compareToFirstPassword\n    }]\n  })(__jsx(Input.Password, {\n    placeholder: \"Password Check\",\n    prefix: __jsx(Icon, {\n      type: \"lock\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }),\n    onChange: onChangePasswordCheck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))), __jsx(\"label\", {\n    htmlFor: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785 \\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\"), __jsx(Checkbox, {\n    required: true,\n    id: \"checkTerm\",\n    onChange: onChangeCheckTerm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      float: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"\\uB4F1\\uB85D\"))));\n};\n\nexport default Form.create({\n  name: 'signUp'\n})(SignUp);","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/udemy-sass/front/components/SignUpForm.Component.jsx"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","Form","Input","Checkbox","Icon","Button","useInput","initValue","value","setter","handler","e","target","SignUp","props","id","onChangeId","password","onChangePassword","passwordCheck","onChangePasswordCheck","checkTerm","onChangeCheckTerm","passwordError","setpasswordError","confirmDirty","setConfirmDirty","isLoading","selector","user","getFieldDecorator","form","dispatch","console","log","onSubmit","preventDefault","type","SIGN_UP_REQUEST","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","rules","message","required","color","validator","float","create","name"],"mappings":"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","sourcesContent":["import React,{useCallback,useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'; \r\nimport {Form,Input,Checkbox, Icon, Button} from 'antd';\r\nexport const useInput = (initValue=null) => {\r\n    const [value,setter] = useState(initValue);\r\n    const handler = useCallback( (e) => {\r\n        setter(e.target.value);\r\n    }, []);\r\n    return [value, handler]; \r\n}\r\n\r\nconst SignUp = (props) => {\r\n    const [id,onChangeId] =useInput('');\r\n    const [password, onChangePassword] = useInput('');\r\n    const [passwordCheck, onChangePasswordCheck] = useInput(''); \r\n    const [checkTerm, onChangeCheckTerm] = useInput('');\r\n    const [passwordError, setpasswordError] = useInput('');\r\n    const [confirmDirty, setConfirmDirty] = useInput('');\r\n    \r\n    const {isLoading} = useSelector(selector => selector.user); \r\n    const {getFieldDecorator} = props.form; \r\n    \r\n    const dispatch = useDispatch(); \r\n    useEffect( (e) => {\r\n        console.log(isLoading);\r\n    },[]);\r\n    const onSubmit = useCallback((e) => {\r\n             e.preventDefault(); \r\n             console.log({\r\n                 id,\r\n                 password,\r\n                 passwordCheck,\r\n                 checkTerm\r\n             })\r\n             dispatch({\r\n                type:SIGN_UP_REQUEST   \r\n             })\r\n    },[id,password,passwordCheck,checkTerm]);\r\n    \r\n    const compareToFirstPassword = (rule, value, callback) => {\r\n        const {form} = props; \r\n        if(value && form && value!== form.getFieldValue('password')) {\r\n            callback('비밀번호가 일치하지 않습니다!');\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    const validateToNextPassword = (rule, value, callback) => {\r\n        const {form} = props;\r\n        if(value && form && confirmDirty) {\r\n            form.validateFields(['confirm'], {force: true})\r\n        }\r\n        callback();\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <Form.Item label=\"이메일\">\r\n                    {\r\n                        getFieldDecorator('email', {\r\n                            rules: [\r\n                                {\r\n                                    type: 'email',\r\n                                    message: '올바른 이메일 형식이 아닙니다.'\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: '이메일을 입력해주세요.'\r\n                                },\r\n                            ]\r\n                        })(<Input\r\n                            placeholder=\"E-mail\"\r\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            onChange={onChangeId}\r\n                            />)\r\n                    }\r\n                </Form.Item >\r\n                <Form.Item label=\"비밀번호\" hasFeedback>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '비밀번호를 입력하세요'\r\n                            },\r\n                            {\r\n                                validator: validateToNextPassword\r\n                            },\r\n                        ]\r\n                    })(<Input.Password \r\n                        placeholder=\"Password\"\r\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                        onChange = {onChangePassword}\r\n                        />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"비밀번호 확인\" hasFeedback>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: '비밀번호를 다시 입력하세요'\r\n                            },\r\n                            {\r\n                                validator: compareToFirstPassword\r\n                            }\r\n                        ]\r\n                    })(<Input.Password  \r\n                        placeholder=\"Password Check\"\r\n                        prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                        onChange = {onChangePasswordCheck}\r\n                    />)}\r\n                </Form.Item>\r\n                <label htmlFor='checkbox'>회원가입 약관에 동의합니다.</label>\r\n                <Checkbox required id ='checkTerm' onChange={onChangeCheckTerm} />\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{float: 'right'}}>등록</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form.create({name:'signUp'})(SignUp);"]},"metadata":{},"sourceType":"module"}